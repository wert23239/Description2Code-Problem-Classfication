given non empty string containing order english representation digits output digits ascending order note input contains lowercase english letters input guaranteed valid can transformed original digits means invalid inputs abc zerone permitted input length less example input owoztneoer output example input fviefuro output
given matrix elements rows columns return elements matrix diagonal order shown image example input output explanation note total number elements given matrix will exceed
there list sorted integers starting left right remove first number every number afterward reach end list repeat previous step time right left remove right number every number remaining numbers keep repeating steps alternating left right right left single number remains find last number remains starting list length example input output
given array integers possible duplicates randomly output index given target number can assume given target number must exist array note array size can large solution uses much extra space will pass judge example int nums new int solution solution new solution nums pick return either index randomly index equal probability returning solution pick pick return since array nums equal solution pick
convert non negative integer english words representation given input guaranteed less example one hundred twenty three twelve thousand three hundred forty five one million two hundred thirty four thousand five hundred sixty seven see pattern dividing number chunk words example group number thousands digits can write helper function takes number less convert just chunk words many edge cases good test cases code work input middle chunk zero printed
a password considered strong conditions met least characters characters must contain least one lowercase letter least one uppercase letter least one digit must contain three repeating characters row aaa weak aa strong assuming conditions met write function strongpasswordchecker takes string input return minimum change required make strong password already strong return insertion deletion replace one character considered one change
implement atoi convert string integer hint carefully consider possible input cases want challenge please see ask possible input cases notes intended problem specified vaguely ie given input specs responsible gather input requirements front update signature function updated still see function signature accepts const char argument please click reload button reset code definition spoilers alert click show requirements atoi requirements atoi function first discards many whitespace characters necessary first non whitespace character found starting character takes optional initial plus minus sign followed many numerical digits possible interprets numerical value string can contain additional characters form integral number ignored effect behavior function first sequence non whitespace characters str valid integral number sequence exists either str empty contains whitespace characters conversion performed valid conversion performed zero value returned correct value range representable values int max int min returned
find length longest substring given string consists lowercase letters every character appears less times example input aaabb output longest substring aaa repeated times example input ababbc output longest substring ababb repeated times repeated times
reverse digits integer example return example return click show spoilers thought good questions ask coding bonus points you already thought integer last digit output ie cases notice reversed integer might overflow assume input bit integer reverse overflows handle cases purpose problem assume function returns reversed integer overflows note input assumed bit signed integer function return reversed integer overflows
find nth digit infinite integer sequence note positive will fit within range bit signed integer example input output example input output explanation th digit sequence part number
given array numbers nums exactly two elements appear elements appear exactly twice find two elements appear example given nums return note order result important example also correct algorithm run linear runtime complexity implement using constant space complexity credits special thanks jianchao li fighter adding problem creating test cases
given integer return number trailing zeroes note solution logarithmic time complexity credits special thanks ts adding problem creating test cases
you playing following nim game friend heap stones table time one take turns remove stones one removes last stone will winner will take first turn remove stones clever optimal strategies game write function determine whether can win game given number stones heap example stones heap will never win game matter stones remove last stone will always removed friend stones heap figure way remove stones will always winner credits special thanks jianchao li fighter adding problem creating test cases
given singly linked list return random node value linked list node must probability chosen follow linked list extremely large length unknown solve efficiently without using extra space example init singly linked list listnode head new listnode head next new listnode head next next new listnode solution solution new solution head getrandom return either randomly element equal probability returning solution getrandom
given two binary strings return sum also binary string example return
given array integers let length assume bk array obtained rotating array positions clock wise define rotation function follow bk bk bk calculate maximum value note guaranteed less example  maximum value
given integer write function determine power three follow without using loop recursion credits special thanks dietpepsi adding problem creating test cases
given non empty array numbers … le ai find maximum result ai xor aj le lt runtime example input output explanation maximum result
calculate sum two integers allowed use operator example given return credits special thanks fujiaozhu adding problem creating test cases
given string consists uppercase english letters can replace letter string another letter times find length longest substring containing repeating letters can get performing operations note string length will exceed example input abab output explanation replace two two vice versa example input aababba output explanation replace one middle form aabbbba substring bbbb longest repeating letters
shuffle set numbers without duplicates example init array set int nums solution solution new solution nums shuffle array return result permutation must equally likely returned solution shuffle resets array back original configuration solution reset returns random shuffling array solution shuffle
you given two jugs capacities litres infinite amount water supply available need determine whether possible measure exactly litres using two jugs liters water measurable must liters water contained within one buckets end operations allowed fill jugs completely water empty jugs pour water one jug another till jug completely full first jug empty example famous die hard example input output true example input output false credits special thanks vinod adding problem creating test cases
given two non negative integers num num represented string return sum num num note length num num num num contains digits num num contain leading zero must use built biginteger library convert inputs integer directly
a character utf can bytes long subjected following rules byte character first bit followed unicode code bytes character first bits one bit followed bytes significant bits utf encoding work char number range utf octet sequence hexadecimal binary xxxxxxx ff xxxxx xxxxxx ffff xxxx xxxxxx xxxxxx ffff xxx xxxxxx xxxxxx xxxxxx given array integers representing data return whether valid utf encoding note input array integers least significant bits integer used store data means integer represents byte data example data represents octet sequence return true valid utf encoding bytes character followed byte character example data represented octet sequence return false first bits one th bit means bytes character next byte continuation byte starts correct second continuation byte start invalid
given array integers every element appears three times except one appears exactly find single one note algorithm linear runtime complexity implement without using extra memory
given non empty integer array find minimum number moves required make array elements equal move incrementing selected element decrementing selected element may assume array length example input output explanation two moves needed remember move increments decrements one element
given integer return base string representation example input output example input output note input will range
given integer convert roman numeral input guaranteed within range
design implement data structure least frequently used lfu cache support following operations get put get key get value will always positive key key exists cache otherwise return put key value set insert value key already present cache reaches capacity invalidate least frequently used item inserting new item purpose problem tie two keys frequency least recently used key evicted follow operations time complexity example lfucache cache new lfucache capacity cache put cache put cache get returns cache put evicts key cache get returns found cache get returns cache put evicts key cache get returns found cache get returns cache get returns
related question excel sheet column title given column title appear excel sheet return corresponding column number example gt gt gt gt aa gt ab gt credits special thanks ts adding problem creating test cases
median middle value ordered integer list size list even middle value median mean two middle value examples median median given array nums sliding window size moving left array right can see numbers window time sliding window moves right one position job output median array window original array example given nums window position median  therefore return median sliding window note may assume always valid ie ≤ ≤ input array size non empty array
determine whether integer palindrome without extra space click show spoilers hints negative integers palindromes ie thinking converting integer string note restriction using extra space also try reversing integer however solved problem reverse integer know reversed integer might overflow handle case generic way solving problem
divide two integers without using multiplication division mod operator overflow return max int
given integers find lexicographically th smallest integer range note le le le example input output explanation lexicographical order  second smallest number
given two words beginword endword dictionary word list find length shortest transformation sequence beginword endword one letter can changed time transformed word must exist word list note beginword transformed word example given beginword hit endword cog wordlist hot dot dog lot log cog one shortest transformation hit hot dot dog cog return length note return transformation sequence words length words contain lowercase alphabetic characters may assume duplicates word list may assume beginword endword non empty update wordlist parameter changed list strings instead set strings please reload code definition get latest changes
additive number string whose digits can form additive sequence valid additive sequence contain least three numbers except first two numbers subsequent number sequence must sum preceding two example additive number digits can form additive sequence  also additive number additive sequence  note numbers additive sequence leading zeros sequence invalid given string containing digits write function determine additive number follow handle overflow large input integers credits special thanks jeantimex adding problem creating test cases
implement trie insert search startswith methods note may assume inputs consist lowercase letters
the hamming distance two integers number positions corresponding bits different now job find total hamming distance pairs given numbers example input output explanation binary representation just showing four bits relevant case answer will hammingdistance hammingdistance hammingdistance note elements given array range length array will exceed
now given string represents software license key like format string composed alphanumerical characters dashes dashes split alphanumerical characters within string groups dashes string split groups dashes given string possibly misplaced want group characters length except possibly first group shorter still must contain least one character satisfy requirement will reinsert dashes additionally lower case letters string must converted upper case given non empty string representing license key format integer need return license key formatted according description example input output explanation string split two parts part characters example input output explanation string split three parts part characters except first part shorter said note length string will exceed positive integer string consists alphanumerical characters z dashes string non empty
given integer signed bits write function check whether power example given num return true given num return false follow solve without loops recursion credits special thanks yukuairoy adding problem creating test cases
find total area covered two rectilinear rectangles plane rectangle defined bottom left corner top right corner shown figure assume total area never beyond maximum possible value int credits special thanks mithmatt adding problem creating image test cases
given non empty integer array size find minimum number moves required make array elements equal move incrementing elements example input output explanation three moves needed remember move increments two elements
given roman numeral convert integer input guaranteed within range
given non negative integer num repeatedly add digits result one digit example given num process like since one digit return follow without loop recursion runtime naive implementation process trivial come methods possible results occur periodically randomly may find wikipedia article useful credits special thanks jianchao li fighter adding problem creating test cases
reverse bits given bits unsigned integer example given input represented binary return represented binary  follow function called many times optimize related problem reverse integer credits special thanks ts adding problem creating test cases
given unsorted array return whether increasing subsequence length exists array formally function return true exists arr lt arr lt arr given le lt lt le else return false algorithm run time complexity space complexity examples given return true given return false credits special thanks djangounchained adding problem creating test cases
write function takes unsigned integer returns number ’ bits also known hamming weight example bit integer ’ binary representation function return credits special thanks ts adding problem creating test cases
write program find nth super ugly number super ugly numbers positive numbers whose prime factors given prime list primes size example sequence first super ugly numbers given primes size note super ugly number given primes given numbers primes ascending order le le primes nth super ugly number guaranteed fit bit signed integer credits special thanks dietpepsi adding problem creating test cases
given axis aligned rectangles determine together form exact cover rectangular region rectangle represented bottom left point top right point example unit square represented coordinate bottom left point top right point example rectangles return true rectangles together form exact cover rectangular region example rectangles  return false gap two rectangular regions example rectangles  return false gap top center example rectangles  return false two rectangles overlap
for web developer important know design web page size given specific rectangular web page’s area job now design rectangular web page whose length width satisfy following requirements area rectangular web page designed must equal given target area width larger length means difference length width small possible need output length width web page designed sequence example input output explanation target area possible ways construct according requirement illegal according requirement optimal compared length width note given area won exceed positive integer web page width length designed must positive integers
given integer write function determine power two credits special thanks jianchao li fighter adding problem creating test cases
design implement data structure least recently used lru cache support following operations get put get key get value will always positive key key exists cache otherwise return put key value set insert value key already present cache reached capacity invalidate least recently used item inserting new item follow operations time complexity example lrucache cache new lrucache capacity cache put cache put cache get returns cache put evicts key cache get returns found cache put evicts key cache get returns found cache get returns cache get returns
write program check whether given number ugly number ugly numbers positive numbers whose prime factors include example ugly ugly since includes another prime factor note typically treated ugly number credits special thanks jianchao li fighter adding problem creating test cases
suppose abstract file system string following manner string dir tsubdir tsubdir tfile ext represents dir subdir subdir file ext directory dir contains empty sub directory subdir sub directory subdir containing file file ext string dir tsubdir tfile ext tsubsubdir tsubdir tsubsubdir t tfile ext represents dir subdir file ext subsubdir subdir subsubdir file ext directory dir contains two sub directories subdir subdir subdir contains file file ext empty second level sub directory subsubdir subdir contains second level sub directory subsubdir containing file file ext interested finding longest number characters absolute path file within file system example second example longest absolute path dir subdir subsubdir file ext length including double quotes given string representing file system format return length longest absolute path file abstracted file system file system return note name file contains least extension name directory sub directory will contain time complexity required size input string notice aa aaa file txt longest file path another path aaaaaaaaaaaaaaaaaaaaa sth png
given integer write algorithm convert hexadecimal negative integer two’s complement method used note letters hexadecimal must lowercase hexadecimal string must contain extra leading number zero represented single zero character otherwise first character hexadecimal string will zero character given number guaranteed fit within range bit signed integer must use method provided library converts formats number hex directly example input output example input output ffffffff
given string array words find maximum value length word length word two words share common letters may assume word will contain lower case letters two words exist return example given abcw baz foo bar xtfn abcdef return two words can abcw xtfn example given ab abc cd bcd abcd return two words can ab cd example given aa aaa aaaa return pair words credits special thanks dietpepsi adding problem creating test cases
write program outputs string representation numbers multiples three output “fizz” instead number multiples five output “buzz” numbers multiples three five output “fizzbuzz” example return fizz buzz fizz fizz buzz fizz fizzbuzz
given positive integer output complement number complement strategy flip bits binary representation note given integer guaranteed fit within range bit signed integer assume leading zero bit integer’s binary representation example input output explanation binary representation leading zero bits complement need output example input output explanation binary representation leading zero bits complement need output
a magical string consists obeys following rules string magical concatenating number contiguous occurrences characters generates string first elements string following …… group consecutive s will occurrences group can see occurrence sequence given integer input return number first number magical string note will exceed example input output explanation first elements magical string contains three return
given positive integer return corresponding column title appear excel sheet example aa ab credits special thanks ifanchu adding problem creating test cases
your task calculate ab mod positive integer extremely large positive integer given form array example result example result credits special thanks stomach ache adding problem creating test cases
given range return bitwise numbers range inclusive example given range return credits special thanks amrsaqr adding problem creating test cases
there bulbs initially first turn bulbs turn every second bulb third round toggle every third bulb turning turning ith round toggle every bulb nth round toggle last bulb find many bulbs rounds example given first three bulbs first round three bulbs second round three bulbs third round three bulbs return one bulb
you given array positive numbers start point moves metres north metres west metres south metres east words move direction changes counter clockwise write one pass algorithm extra space determine path crosses example given ┌───┐ │ │ └───┼── │ return true self crossing example given ┌──────┐ │ │ │ │ └──────────── return false self crossing example given ┌───┐ │ │ └───┼ return true self crossing credits special thanks dietpepsi adding problem creating test cases
given integer return lexicographical order example given return please optimize algorithm use less time space input size may large
given board count many battleships battleships represented empty slots represented may assume following rules receive valid board made battleships empty slots battleships can placed horizontally vertically words can made shape xn row columns nx rows column can size least one horizontal vertical cell separates two battleships adjacent battleships example board battleships invalid example xxxx invalid board will receive battleships will always cell separating follow one pass using extra memory without modifying value board
given positive integer can operations follow even replace n odd can replace either minimum number replacements needed become example input output explanation example input output explanation
the hamming distance two integers number positions corresponding bits different given two integers calculate hamming distance note le lt example input output explanation ↑ ↑ arrows point positions corresponding bits different
implement data structure supporting following operations inc key inserts new key value increments existing key key guaranteed non empty string dec key key value remove data structure otherwise decrements existing key key exist function nothing key guaranteed non empty string getmaxkey returns one keys maximal value element exists return empty string getminkey returns one keys minimal value element exists return empty string challenge perform time complexity
given scores athletes find relative ranks people top three highest scores will awarded medals gold medal silver medal bronze medal example input output gold medal silver medal bronze medal explanation first three athletes got top three highest scores got gold medal silver medal bronze medal left two athletes just need output relative ranks according scores note positive integer won exceed scores athletes guaranteed unique
given two non negative integers num num represented strings return product num num note length num num num num contains digits num num contain leading zero must use built biginteger library convert inputs integer directly
validate given string numeric examples true true abc false false true note intended problem statement ambiguous gather requirements front implementing one update signature function updated still see function signature accepts const char argument please click reload button reset code definition
given string find first non repeating character return index doesn exist return examples leetcode return loveleetcode return note may assume string contain lowercase letters
given iterator class interface methods next hasnext design implement peekingiterator support peek operation essentially peek element will returned next call next example assume iterator initialized beginning list call next gets first element list now call peek returns next element calling next still return call next final time returns last element calling hasnext return false think looking ahead want cache next element one variable sufficient why test design call order peek next vs next peek clean implementation check google guava library source code follow extend design generic work types just integer credits special thanks porker adding problem creating test cases
given integer count total number digit appearing non negative integers less equal example given return digit occurred following numbers beware overflow
