given binary tree need compute length diameter tree diameter binary tree length longest path two nodes tree path may may pass root example given binary tree  return length path note length path two nodes represented number edges
median middle value ordered integer list size list even middle value median mean two middle value examples median median design data structure supports following two operations void addnum int num add integer number data stream data structure double findmedian return median elements far example addnum addnum findmedian addnum findmedian credits special thanks louis adding problem creating test cases
given linked list determine cycle follow can solve without using extra space
given matrix element set entire row column place click show follow follow use extra space straight forward solution using mn space probably bad idea simple improvement uses space still best solution devise constant space solution
the count say sequence sequence integers beginning follows  read one read two read one one given integer generate nth sequence note sequence integers will represented string
invert binary tree trivia problem inspired original tweet max howell google engineers use software wrote homebrew can’t invert binary tree whiteboard fuck
given array integers return indices two numbers add specific target may assume input exactly one solution may use element twice example given nums target nums nums return
given array words length format text line exactly characters fully left right justified pack words greedy approach pack many words can line pad extra spaces necessary line exactly characters extra spaces words distributed evenly possible number spaces line divide evenly words empty slots left will assigned spaces slots right last line text left justified extra space inserted words example words example text justification return formatted lines example text justification note word guaranteed exceed length click show corner cases corner cases line last line might contain one word case case line left justified
suppose array sorted ascending order rotated pivot unknown beforehand might become find minimum element may assume duplicate exists array
given data stream input non negative integers summarize numbers seen far list disjoint intervals example suppose integers data stream summary will  follow lots merges number disjoint intervals small compared data stream size credits special thanks yunhong adding problem creating test cases
note companion problem system design problem design tinyurl tinyurl url shortening service enter url https leetcode com problems design tinyurl returns short url http tinyurl com iak design encode decode methods tinyurl service restriction encode decode algorithm work just need ensure url can encoded tiny url tiny url can decoded original url
description count number prime numbers less non negative number credits special thanks mithmatt adding problem creating test cases let start isprime function determine number prime need check divisible number less runtime complexity isprime function hence counting total prime numbers better know number must divisible number can immediately cut total iterations half dividing still better let write factors × × × × can see calculations × × necessary therefore need consider factors radic divisible number × since le derive le radic total runtime now improved slightly better faster approach public int countprimes int int count int isprime count return count private boolean isprime int num num return false loop ending condition num instead sqrt num avoid repeatedly calling expensive function sqrt int num num return false return true sieve eratosthenes one efficient ways find prime numbers don let name scare promise concept surprisingly simple sieve eratosthenes algorithm steps primes sieve eratosthenes animation skopp licensed cc start table numbers let look first number know multiples must primes mark non primes look next number similarly multiples × × must primes mark now look next number already marked tell mark multiples prime divisible means multiples must also divisible already marked can skip immediately go next number now multiples × × × × can marked slight optimization need start × start marking fact can mark multiples starting × × already marked multiple similarly × already marked multiple therefore current number can always mark multiples starting increments now terminating loop condition easy say terminating loop condition certainly correct efficient still remember hint yes terminating loop condition can radic non primes ge radic must already marked loop terminates numbers table non marked prime sieve eratosthenes uses extra memory runtime complexity log log mathematically inclined readers can read algorithm complexity wikipedia public int countprimes int boolean isprime new boolean int isprime true loop ending condition instead sqrt avoid repeatedly calling expensive function sqrt int isprime continue int isprime false int count int isprime count return count
given binary tree return level order traversal nodes values ie left right level level example given binary tree null null return level order traversal
a city skyline outer contour silhouette formed buildings city viewed distance now suppose given locations height buildings shown cityscape photo figure write program output skyline formed buildings collectively figure geometric information building represented triplet integers li ri hi li ri coordinates left right edge ith building respectively hi height guaranteed ≤ li ri ≤ int max hi ≤ int max ri li may assume buildings perfect rectangles grounded absolutely flat surface height instance dimensions buildings figure recorded  output list key points red dots figure format uniquely defines skyline key point left endpoint horizontal line segment note last key point rightmost building ends merely used mark termination skyline always zero height also ground two adjacent buildings considered part skyline contour instance skyline figure represented  notes number buildings input list guaranteed range input list already sorted ascending order left position li output list must sorted position must consecutive horizontal lines equal height output skyline instance  acceptable three lines height merged one final output credits special thanks stellari adding problem creating two awesome images test cases
say array ith element price given stock day design algorithm find maximum profit may complete many transactions like ie buy one sell one share stock multiple times however may engage multiple transactions time ie must sell stock buy
write function check whether input string valid ipv address ipv address neither ipv addresses canonically represented dot decimal notation consists four decimal numbers ranging separated dots besides leading zeros ipv invalid example address invalid ipv addresses represented eight groups four hexadecimal digits group representing bits groups separated colons example address db valid one also omit leading zeros among four hexadecimal digits low case characters address upper case ones db also valid ipv address omit leading zeros using upper cases however don replace consecutive group zero value single empty group using two consecutive colons pursue simplicity example db invalid ipv address besides extra leading zeros ipv also invalid example address db invalid note may assume extra space special characters input string example input output ipv explanation valid ipv address return ipv example input db output ipv explanation valid ipv address return ipv example input output neither explanation neither ipv address ipv address
you given matrix representing image rotate image degrees clockwise follow place
given circular array next element last element first element array print next greater number every element next greater number number first greater number traversing order next array means search circularly find next greater number doesn exist output number example input output explanation first next greater number number can find next greater number second next greater number needs search circularly also note length given array won exceed
determine sudoku valid according sudoku puzzles rules sudoku board partially filled empty cells filled character partially filled sudoku valid note valid sudoku board partially filled necessarily solvable filled cells need validated
given nested list integers represented string implement parser deserialize element either integer list whose elements may also integers lists note may assume string formed string non empty string contain white spaces string contains digits example given return nestedinteger object contains single integer example given return nestedinteger object containing nested list elements integer containing value nested list containing two elements integer containing value ii nested list one element integer containing value
given list hour clock time points hour minutes format find minimum minutes difference two time points list example input output note number time points given list least won exceed input time legal ranges
given sorted integer array without duplicates return summary ranges example given return credits special thanks jianchao li fighter adding problem creating test cases
given word need judge whether usage capitals right define usage capitals word right one following cases holds letters word capitals like usa letters word capitals like leetcode first letter word capital one letter like google otherwise define word doesn use capitals right way example input usa output true example input flag output false note input will non empty word consisting uppercase lowercase latin letters
given binary tree return bottom level order traversal nodes values ie left right level level leaf root example given binary tree null null return bottom level order traversal
write function find longest common prefix string amongst array strings
given non empty string check can constructed taking substring appending multiple copies substring together may assume given string consists lowercase english letters length will exceed example input abab output true explanation substring ab twice example input aba output false example input abcabcabcabc output true explanation substring abc four times substring abcabc twice
reverse singly linked list click show hints hint linked list can reversed either iteratively recursively implement
the string paypalishiring written zigzag pattern given number rows like may want display pattern fixed font better legibility read line line pahnaplsiigyir write code will take string make conversion given number rows string convert string text int nrows convert paypalishiring return pahnaplsiigyir
given non negative integers representing histogram bar height width bar find area largest rectangle histogram histogram width bar given height largest rectangle shown shaded area area unit example given heights return
given array integers find three integers sum closest given number target return sum three integers may assume input exactly one solution example given array target sum closest target
given two binary trees write function check equal two binary trees considered equal structurally identical nodes value
serialization process converting data structure object sequence bits can stored file memory buffer transmitted across network connection link reconstructed later another computer environment design algorithm serialize deserialize binary tree restriction serialization deserialization algorithm work just need ensure binary tree can serialized string string can deserialized original tree structure example may serialize following tree  null null just leetcode oj serializes binary tree necessarily need follow format please creative come different approaches note use class member global static variables store states serialize deserialize algorithms stateless credits special thanks louis adding problem creating test cases
write program find node intersection two singly linked lists begins example following two linked lists → ↘ → → ↗ → → begin intersect node notes two linked lists intersection return null linked lists must retain original structure function returns may assume cycles anywhere entire linked structure code preferably run time use memory credits special thanks stellari adding problem creating test cases
write function takes string input reverse vowels string example given hello return holle example given leetcode return leotcede note vowels include letter
given binary array find maximum number consecutive array example input output explanation first two digits last three digits consecutive maximum number consecutive note input array will contain length input array positive integer will exceed
equations given format variables represented strings real number floating point number given queries return answers answer exist return example given queries  return input vector lt pair lt string string gt gt equations vector lt double gt amp values vector lt pair lt string string gt gt queries equations size values size values positive represents equations return vector lt double gt according example equations values queries input always valid may assume evaluating queries will result division zero contradiction
one way serialize binary tree use pre order traversal encounter non null node record node value null node record using sentinel value example binary tree can serialized string represents null node given string comma separated values verify whether correct preorder traversal serialization binary tree find algorithm without reconstructing tree comma separated value string must either integer character representing null pointer may assume input format always valid example never contain two consecutive commas example return true example return false example return false credits special thanks dietpepsi adding problem creating test cases
you given two non empty linked lists representing two non negative integers significant digit comes first nodes contain single digit add two numbers return linked list may assume two numbers contain leading zero except number follow modify input lists words reversing lists allowed example input output
write algorithm determine number happy happy number number defined following process starting positive integer replace number sum squares digits repeat process number equals will stay loops endlessly cycle include numbers process ends happy numbers example nbsp happy number credits special thanks mithmatt ts adding problem creating test cases
given string find length longest substring without repeating characters examples given abcabcbb answer abc length given bbbbb answer length given pwwkew answer wke length note answer must substring pwke subsequence substring
given array integers elements target find unique quadruplets array gives sum target note solution set must contain duplicate quadruplets example given array target solution set
given sorted array target value return index target found return index inserted order may assume duplicates array examples
given sequence integers pattern subsequence ai aj ak ai ak aj design algorithm takes list numbers input checks whether pattern list note will less example input output false explanation pattern sequence example input output true explanation pattern sequence example input output true explanation three patterns sequence
given two strings consist lowercase letters string generated random shuffling string add one letter random position find letter added example input abcd abcde output explanation letter added
given binary search tree bst duplicates find mode frequently occurred element given bst assume bst defined follows left subtree node contains nodes keys less equal node key right subtree node contains nodes keys greater equal node key left right subtrees must also binary search trees example given bst null return note tree one mode can return order follow without using extra space assume implicit stack space incurred due recursion count
implement following operations queue using stacks push push element back queue pop removes element front queue peek get front element empty return whether queue empty notes must use standard operations stack means push top peek pop top size empty operations valid depending language stack may supported natively may simulate stack using list deque double ended queue long use standard operations stack may assume operations valid example pop peek operations will called empty queue
write efficient algorithm searches value matrix matrix following properties integers row sorted left right first integer row greater last integer previous row example consider following matrix  given target return true
given binary search tree bst convert greater tree every key original bst changed original key plus sum keys greater original key bst example input root binary search tree like output root greater tree like
you given two integer arrays nums nums sorted ascending order integer define pair consists one element first array one element second array find pairs uk vk smallest sums example given nums nums return first pairs returned sequence example given nums nums return first pairs returned sequence  example given nums nums return possible pairs returned sequence credits special thanks elmirap stefanpochmann adding problem creating test cases
follow remove duplicates duplicates allowed twice example given sorted array nums function return length first five elements nums doesn matter leave beyond new length
find sum left leaves given binary tree example two left leaves binary tree values respectively return
given singly linked list group odd nodes together followed even nodes please note talking node number value nodes try place program run space complexity nodes time complexity example given null return null note relative order inside even odd groups remain input first node considered odd second node even credits special thanks djangounchained adding problem creating test cases
given binary tree flatten linked list place example given flattened tree look like  click show hints hints notice carefully flattened tree node right child points next node pre order traversal
serialization process converting data structure object sequence bits can stored file memory buffer transmitted across network connection link reconstructed later another computer environment design algorithm serialize deserialize binary search tree restriction serialization deserialization algorithm work just need ensure binary search tree can serialized string string can deserialized original tree structure encoded string compact possible note use class member global static variables store states serialize deserialize algorithms stateless
given binary search tree non negative values find minimum absolute difference values two nodes example input  output explanation minimum absolute difference difference note least two nodes bst
given linked list reverse nodes linked list time return modified list positive integer less equal length linked list number nodes multiple left nodes end remain may alter values nodes nodes may changed constant memory allowed example given linked list return return
all dna composed series nucleotides abbreviated example acgaattccg studying dna sometimes useful identify repeated sequences within dna write function find letter long sequences substrings occur dna molecule example given aaaaacccccaaaaaccccccaaaaagggttt return aaaaaccccc cccccaaaaa
given binary tree sum determine tree root leaf path adding values along path equals given sum example given binary tree sum  return true exist root leaf path sum
the thief found new place thievery one entrance area called root besides root house one one parent house tour smart thief realized houses place forms binary tree will automatically contact police two directly linked houses broken night determine maximum amount money thief can rob tonight without alerting police example maximum amount money thief can rob example maximum amount money thief can rob credits special thanks dietpepsi adding problem creating test cases
given array integers nums return array output output equal product elements nums except nums solve without division example given return follow solve constant space complexity note output array count extra space purpose space complexity analysis
given sorted linked list delete duplicates element appear example given return given return
given integer array nums find sum elements indices le inclusive update val function modifies nums updating element index val example given nums sumrange update sumrange note array modifiable update function may assume number calls update sumrange function distributed evenly
given collection candidate numbers target number find unique combinations candidate numbers sums number may used combination note numbers including target will positive integers solution set must contain duplicate combinations example given candidate set target solution set
implement iterator binary search tree bst iterator will initialized root node bst calling next will return next smallest number bst note next hasnext run average time uses memory height tree credits special thanks ts adding problem creating test cases
you need find largest value row binary tree example input output
write function takes string input returns string reversed example given hello return olleh
given array size find majority element majority element element appears lfloor rfloor times may assume array non empty majority element always exist array credits special thanks ts adding problem creating test cases
given singly linked list →l →…→ln →ln reorder →ln→l →ln →l →ln →… must place without altering nodes values example given reorder
given input string reverse string word word example given sky blue return blue sky update programmers try solve place space click show clarification clarification constitutes word sequence non space characters constitutes word input string contain leading trailing spaces yes however reversed string contain leading trailing spaces multiple spaces two words reduce single space reversed string
given binary tree find leftmost value last row tree example input output example input output note may assume tree given root node null
given absolute path file unix style simplify example path home home path click show corner cases corner cases consider case path case return another corner case path might contain multiple slashes together home foo case ignore redundant slashes return home foo
given binary tree find lowest common ancestor lca two given nodes tree according definition lca wikipedia “the lowest common ancestor defined two nodes lowest node descendants allow node descendant ”  example lowest common ancestor lca nodes another example lca nodes since node can descendant according lca definition
given string string find minimum window will contain characters complexity example adobecodebanc abc minimum window banc note window covers characters return empty string multiple windows guaranteed will always one unique minimum window
find contiguous subarray within array containing least one number largest sum example given array contiguous subarray largest sum click show practice practice figured solution try coding another solution using divide conquer approach subtle
a robot located top left corner grid marked start diagram robot can move either right point time robot trying reach bottom right corner grid marked finish diagram many possible unique paths grid many possible unique paths note will
given points plane find maximum number points lie straight line
given binary tree sum find root leaf paths path sum equals given sum example given binary tree sum  return
implement basic calculator evaluate simple expression string expression string contains non negative integers operators empty spaces integer division truncate toward zero may assume given expression always valid examples  note use eval built library function credits special thanks ts adding problem creating test cases
given binary tree find maximum path sum problem path defined sequence nodes starting node node tree along parent child connections path must contain least one node need go root example given binary tree return
implement next permutation rearranges numbers lexicographically next greater permutation numbers arrangement possible must rearrange lowest possible order ie sorted ascending order replacement must place allocate extra memory examples inputs left hand column corresponding outputs right hand column
given string consists upper lower case alphabets empty space characters return length last word string last word exist return note word defined character sequence consists non space characters example given hello world return
given list words return words can typed using letters alphabet one row american keyboard like image example input hello alaska dad peace output alaska dad note may use one character keyboard may assume input string will contain letters alphabet
given binary tree return postorder traversal nodes values example given binary tree return note recursive solution trivial iteratively
given array nums sliding window size moving left array right can see numbers window time sliding window moves right one position example given nums window position max   therefore return max sliding window note may assume always valid ie ≤ ≤ input array size non empty array follow solve linear time using data structure deque double ended queue queue size need the window’s size remove redundant elements queue store elements need considered
given linked list remove nth node end list return head example given linked list removing second node end linked list becomes note given will always valid try one pass
given string integer need reverse first characters every characters counting start string less characters left reverse less greater equal characters reverse first characters left original example input abcdefg output bacdfeg restrictions string consists lower english letters length given string will range
implement strstr returns index first occurrence needle haystack needle part haystack
given points plane pairwise distinct boomerang tuple points distance equals distance order tuple matters find number boomerangs may assume will coordinates points range inclusive example input output explanation two boomerangs
given sorted array remove duplicates place element appear return new length allocate extra space another array must place constant memory example given input array nums function return length first two elements nums respectively doesn matter leave beyond new length
given array integers every element appears twice except one find single one note algorithm linear runtime complexity implement without using extra memory
given non empty array integers return frequent elements example given return note may assume always valid ≤ ≤ number unique elements algorithm time complexity must better log array size
say array ith element price given stock day design algorithm find maximum profit may complete two transactions note may engage multiple transactions time ie must sell stock buy
given preorder inorder traversal tree construct binary tree note may assume duplicates exist tree
given array non negative integers initially positioned first index array element array represents maximum jump length position goal reach last index minimum number jumps example given array minimum number jumps reach last index jump step index steps last index note can assume can always reach last index
given numrows generate first numrows pascal triangle example given numrows return
given array non negative integers initially positioned first index array element array represents maximum jump length position determine able reach last index example return true return false
given matrix elements rows columns return elements matrix spiral order example given following matrix  return
follow find minimum rotated sorted array duplicates allowed affect run time complexity suppose array sorted ascending order rotated pivot unknown beforehand might become find minimum element array may contain duplicates
given non negative integers represents point coordinate ai vertical lines drawn two endpoints line ai find two lines together axis forms container container contains water note may slant container least
given array integers elements find unique triplets array gives sum zero note solution set must contain duplicate triplets example given array solution set
given two words beginword endword dictionary word list find shortest transformation sequence beginword endword one letter can changed time transformed word must exist word list note beginword transformed word example given beginword hit endword cog wordlist hot dot dog lot log cog return hit hot dot dog cog hit hot lot log cog note return empty list transformation sequence words length words contain lowercase alphabetic characters may assume duplicates word list may assume beginword endword non empty update wordlist parameter changed list strings instead set strings please reload code definition get latest changes
find contiguous subarray within array containing least one number largest product example given array contiguous subarray largest product
remove elements linked list integers value val example given val return credits special thanks mithmatt adding problem creating test cases
design data structure supports following operations average time insert val inserts item val set already present remove val removes item val set present getrandom returns random element current set elements element must probability returned example init empty set randomizedset randomset new randomizedset inserts set returns true inserted successfully randomset insert returns false exist set randomset remove inserts set returns true set now contains randomset insert getrandom return either randomly randomset getrandom removes set returns true set now contains randomset remove already set return false randomset insert since number set getrandom always return randomset getrandom
given nested list integers implement iterator flatten element either integer list whose elements may also integers lists example given list calling next repeatedly hasnext returns false order elements returned next example given list calling next repeatedly hasnext returns false order elements returned next
given sorted linked list delete nodes duplicate numbers leaving distinct numbers original list example given return given return
given pattern string str find str follows pattern follow means full match bijection letter pattern non empty word str examples pattern abba str dog cat cat dog return true pattern abba str dog cat cat fish return false pattern aaaa str dog cat cat dog return false pattern abba str dog dog dog dog return false notes may assume pattern contains lowercase letters str contains lowercase letters separated single space credits special thanks minglotus adding problem creating test cases
you given binary tree node contains integer value find number paths sum given value path need start end root leaf must go downwards traveling parent nodes child nodes tree nodes values range example root null null sum return paths sum
given string non empty string find start indices anagrams strings consists lowercase english letters length strings will larger order output matter example input cbaebabacd abc output explanation substring start index cba anagram abc substring start index bac anagram abc example input abab ab output explanation substring start index ab anagram ab substring start index ba anagram ab substring start index ab anagram ab
design stack supports push pop top retrieving minimum element constant time push push element onto stack pop removes element top stack top get top element getmin retrieve minimum element stack example minstack minstack new minstack minstack push minstack push minstack push minstack getmin returns minstack pop minstack top returns minstack getmin returns
follow problem populating next right pointers node given tree binary tree previous solution still work note may use constant extra space example given following binary tree calling function tree look like null null null
given array nums call important reverse pair lt nums gt nums need return number important reverse pairs given array example input output example input output note length given array will exceed numbers input array range bit integer
implement following operations stack using queues push push element onto stack pop removes element top stack top get top element empty return whether stack empty notes must use standard operations queue means push back peek pop front size empty operations valid depending language queue may supported natively may simulate queue using list deque double ended queue long use standard operations queue may assume operations valid example pop top operations will called empty stack credits special thanks jianchao li fighter adding problem test cases
evaluate value arithmetic expression reverse polish notation valid operators operand may integer another expression examples
given collection integers might contain duplicates nums return possible subsets note solution set must contain duplicate subsets example nums solution
given binary tree find minimum depth minimum depth number nodes along shortest path root node nearest leaf node
count number segments string segment defined contiguous sequence non space characters please note string contain non printable characters example input hello name john output
given array value remove instances value place return new length allocate extra space another array must place constant memory order elements can changed doesn matter leave beyond new length example given input array nums val function return length first two elements nums try two pointers use property order elements can changed happens elements remove rare
given binary tree return zigzag level order traversal nodes values ie left right right left next level alternate example given binary tree null null return zigzag level order traversal
given array strings group anagrams together example given eat tea tan ate nat bat return ate eat tea nat tan bat note inputs will lower case
given binary tree containing digits root leaf path represent number example root leaf path represents number find total sum root leaf numbers example root leaf path represents number root leaf path represents number return sum
given string find longest palindromic substring may assume maximum length example input babad output bab note aba also valid answer example input cbbd output bb
you given two arrays without duplicates nums nums nums ’s elements subset nums find next greater numbers nums elements corresponding places nums next greater number number nums first greater number right nums exist output number example input nums nums output explanation number first array find next greater number second array output number first array next greater number second array number first array next greater number second array output example input nums nums output explanation number first array next greater number second array number first array next greater number second array output note elements nums nums unique length nums nums exceed
given string determine palindrome considering alphanumeric characters ignoring cases example man plan canal panama palindrome race car palindrome note consider string might empty good question ask interview purpose problem define empty string valid palindrome
given list unique words find pairs distinct indices given list concatenation two words words words palindrome example given words bat tab cat return palindromes battab tabbat example given words abcd dcba lls sssll return palindromes dcbaabcd abcddcba slls llssssll credits special thanks dietpepsi adding problem creating test cases
given non negative integer represented non empty array digits plus one integer may assume integer contain leading zero except number digits stored significant digit head list
you given string list words words length find starting indices substring concatenation word words exactly without intervening characters example given barfoothefoobarman words foo bar return indices order matter
given array elements sorted ascending order convert height balanced bst
given non negative integer num represented string remove digits number new number smallest possible note length num less will ge given num contain leading zero example input num output explanation remove three digits form new number smallest example input num output explanation remove leading number note output must contain leading zeroes example input num output explanation remove digits number left nothing
given binary tree return preorder traversal nodes values example given binary tree return note recursive solution trivial iteratively
given many structurally unique bst binary search trees store values example given total unique bst
given grid filled non negative numbers find path top left bottom right minimizes sum numbers along path note can move either right point time
given complete binary tree count number nodes definition complete binary tree wikipedia complete binary tree every level except possibly last completely filled nodes last level far left possible can nodes inclusive last level
follow search rotated sorted array duplicates allowed affect run time complexity suppose array sorted ascending order rotated pivot unknown beforehand might become write function determine given target array array may contain duplicates
given array positive integers positive integer find minimal length contiguous subarray sum ≥ isn one return instead example given array subarray minimal length problem constraint click show practice practice figured solution try coding another solution time complexity log credits special thanks freezen adding problem creating test cases
given array integers ≤ ≤ size array elements appear twice others appear find elements inclusive appear array without extra space runtime may assume returned list count extra space example input output
given binary tree return inorder traversal nodes values example given binary tree null return note recursive solution trivial iteratively
given index return kth row pascal triangle example given return note optimize algorithm use extra space
you given map form two dimensional integer grid represents land represents water grid cells connected horizontally vertically diagonally grid completely surrounded water exactly one island one connected land cells island doesn lakes water inside isn connected water around island one cell square side length grid rectangular width height don exceed determine perimeter island example  answer explanation perimeter yellow stripes image
two elements binary search tree bst swapped mistake recover tree without changing structure note solution using space pretty straight forward devise constant space solution
given non negative integers representing elevation map width bar compute much water able trap raining example given return elevation map represented array case units rain water blue section trapped thanks marcos contributing image
given two strings write function determine anagram example anagram nagaram return true rat car return false note may assume string contains lowercase alphabets follow inputs contain unicode characters adapt solution case
given board word find word exists grid word can constructed letters sequentially adjacent cell adjacent cells horizontally vertically neighboring letter cell may used example given board word abcced returns true word see returns true word abcb returns false
given string consists lowercase uppercase letters find length longest palindromes can built letters case sensitive example aa considered palindrome note assume length given string will exceed example input abccccdd output explanation one longest palindrome can built dccaccd whose length
given two strings determine isomorphic two strings isomorphic characters can replaced get occurrences character must replaced another character preserving order characters two characters may map character character may map example given egg add return true given foo bar return false given paper title return true note may assume length
given binary tree find maximum depth maximum depth number nodes along longest path root node farthest leaf node
given array integers find array contains duplicates function return true value appears least twice array return false every element distinct
design data structure supports following operations average time note duplicate elements allowed insert val inserts item val collection remove val removes item val collection present getrandom returns random element current collection elements probability element returned linearly related number value collection contains example init empty collection randomizedcollection collection new randomizedcollection inserts collection returns true collection contain collection insert inserts another collection returns false collection contained collection now contains collection insert inserts collection returns true collection now contains collection insert getrandom return probability returns probability collection getrandom removes collection returns true collection now contains collection remove getrandom return equally likely collection getrandom
given set non overlapping intervals insert new interval intervals merge necessary may assume intervals initially sorted according start times example given intervals insert merge example given insert merge new interval overlaps
a linked list given node contains additional random pointer point node list null return deep copy list
given array integers le le size array elements appear twice others appear find elements appear twice array without extra space runtime example input output
in llp world hero called teemo attacking can make enemy ashe poisoned condition now given teemo attacking ascending time series towards ashe poisoning time duration per teemo attacking need output total time ashe poisoned condition may assume teemo attacks beginning specific time point makes ashe poisoned condition immediately example input output explanation time point teemo starts attacking ashe makes ashe poisoned immediately poisoned status will last seconds end time point time point teemo attacks ashe causes ashe poisoned status another seconds finally need output example input output explanation time point teemo starts attacking ashe makes ashe poisoned poisoned status will last seconds end time point however beginning time point teemo attacks ashe already poisoned status since poisoned status won add together though second poisoning attack will still work time point will stop end time point finally need output note may assume length given time series array won exceed may assume numbers teemo attacking time series poisoning time duration per attacking non negative integers won exceed
given array integers integer need find number unique diff pairs array diff pair defined integer pair numbers array absolute difference example input output explanation two diff pairs array although two input return number unique pairs example input output explanation four diff pairs array example input output explanation one diff pair array note pairs count pair length array won exceed integers given input belong range
according wikipedia article game life also known simply life cellular automaton devised british mathematician john horton conway given board cells cell initial state live dead cell interacts eight neighbors horizontal vertical diagonal using following four rules taken wikipedia article live cell fewer two live neighbors dies caused population live cell two three live neighbors lives next generation live cell three live neighbors dies population dead cell exactly three live neighbors becomes live cell reproduction write function compute next state one update board given current state follow solve place remember board needs updated time update cells first use updated values update cells question represent board using array principle board infinite cause problems active area encroaches border array address problems credits special thanks jianchao li fighter adding problem creating test cases
given linked list return node cycle begins cycle return null note modify linked list follow can solve without using extra space
given set distinct integers nums return possible subsets note solution set must contain duplicate subsets example nums solution
design simplified version twitter users can post tweets follow unfollow another user able see recent tweets user news feed design support following methods posttweet userid tweetid compose new tweet getnewsfeed userid retrieve recent tweet ids user news feed item news feed must posted users user followed user tweets must ordered recent least recent follow followerid followeeid follower follows followee unfollow followerid followeeid follower unfollows followee example twitter twitter new twitter user posts new tweet twitter posttweet user news feed return list tweet twitter getnewsfeed user follows user twitter follow user posts new tweet twitter posttweet user news feed return list tweet ids tweet precede tweet posted tweet twitter getnewsfeed user unfollows user twitter unfollow user news feed return list tweet since user longer following user twitter getnewsfeed
given binary tree struct treelinknode treelinknode left treelinknode right treelinknode next populate next pointer point next right node next right node next pointer set null initially next pointers set null note may use constant extra space may assume perfect binary tree ie leaves level every parent two children example given following perfect binary tree calling function tree look like null null null
given set candidate numbers without duplicates target number find unique combinations candidate numbers sums repeated number may chosen unlimited number times note numbers including target will positive integers solution set must contain duplicate combinations example given candidate set target solution set
given string contains lowercase letters remove duplicate letters every letter appear must make sure result smallest lexicographical order among possible results example given bcabc return abc given cbacdcbc return acdb credits special thanks dietpepsi adding problem creating test cases
merge two sorted linked lists return new list new list made splicing together nodes first two lists
given binary matrix filled find largest rectangle containing return area example given following matrix  return
given collection intervals merge overlapping intervals example given return
given integer generate square matrix filled elements spiral order example given return following matrix
given binary tree imagine standing right side return values nodes can see ordered top bottom example given following binary tree  return credits special thanks amrsaqr adding problem creating test cases
given integer generate structurally unique bst binary search trees store values example given program return unique bst shown
given array containing distinct numbers taken find one missing array example given nums return note algorithm run linear runtime complexity implement using constant extra space complexity credits special thanks jianchao li fighter adding problem creating test cases
given linked list swap every two adjacent nodes return head example given return list algorithm use constant space may modify values list nodes can changed
write function delete node except tail singly linked list given access node supposed linked list given third node value linked list become calling function
you given two non empty linked lists representing two non negative integers digits stored reverse order nodes contain single digit add two numbers return linked list may assume two numbers contain leading zero except number input output
