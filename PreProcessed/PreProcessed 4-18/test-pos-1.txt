given binary tree need compute length diameter tree diameter binary tree length longest path two nodes tree path may may pass root example given binary tree  return length path note length path two nodes represented number edges
median middle value ordered integer list size list even middle value median mean two middle value examples median median design data structure supports following two operations void addnum int num add integer number data stream data structure double findmedian return median elements far example addnum addnum findmedian addnum findmedian credits special thanks louis adding problem creating test cases
given linked list determine cycle follow can solve without using extra space
given matrix element set entire row column place click show follow follow use extra space straight forward solution using mn space probably bad idea simple improvement uses space still best solution devise constant space solution
the count say sequence sequence integers beginning follows  read one read two read one one given integer generate nth sequence note sequence integers will represented string
invert binary tree trivia problem inspired original tweet max howell google engineers use software wrote homebrew can’t invert binary tree whiteboard fuck
given array integers return indices two numbers add specific target may assume input exactly one solution may use element twice example given nums target nums nums return
given array words length format text line exactly characters fully left right justified pack words greedy approach pack many words can line pad extra spaces necessary line exactly characters extra spaces words distributed evenly possible number spaces line divide evenly words empty slots left will assigned spaces slots right last line text left justified extra space inserted words example words example text justification return formatted lines example text justification note word guaranteed exceed length click show corner cases corner cases line last line might contain one word case case line left justified
suppose array sorted ascending order rotated pivot unknown beforehand might become find minimum element may assume duplicate exists array
given data stream input non negative integers summarize numbers seen far list disjoint intervals example suppose integers data stream summary will  follow lots merges number disjoint intervals small compared data stream size credits special thanks yunhong adding problem creating test cases
note companion problem system design problem design tinyurl tinyurl url shortening service enter url https leetcode com problems design tinyurl returns short url http tinyurl com iak design encode decode methods tinyurl service restriction encode decode algorithm work just need ensure url can encoded tiny url tiny url can decoded original url
description count number prime numbers less non negative number credits special thanks mithmatt adding problem creating test cases let start isprime function determine number prime need check divisible number less runtime complexity isprime function hence counting total prime numbers better know number must divisible number can immediately cut total iterations half dividing still better let write factors × × × × can see calculations × × necessary therefore need consider factors radic divisible number × since le derive le radic total runtime now improved slightly better faster approach public int countprimes int int count int isprime count return count private boolean isprime int num num return false loop ending condition num instead sqrt num avoid repeatedly calling expensive function sqrt int num num return false return true sieve eratosthenes one efficient ways find prime numbers don let name scare promise concept surprisingly simple sieve eratosthenes algorithm steps primes sieve eratosthenes animation skopp licensed cc start table numbers let look first number know multiples must primes mark non primes look next number similarly multiples × × must primes mark now look next number already marked tell mark multiples prime divisible means multiples must also divisible already marked can skip immediately go next number now multiples × × × × can marked slight optimization need start × start marking fact can mark multiples starting × × already marked multiple similarly × already marked multiple therefore current number can always mark multiples starting increments now terminating loop condition easy say terminating loop condition certainly correct efficient still remember hint yes terminating loop condition can radic non primes ge radic must already marked loop terminates numbers table non marked prime sieve eratosthenes uses extra memory runtime complexity log log mathematically inclined readers can read algorithm complexity wikipedia public int countprimes int boolean isprime new boolean int isprime true loop ending condition instead sqrt avoid repeatedly calling expensive function sqrt int isprime continue int isprime false int count int isprime count return count
given binary tree return level order traversal nodes values ie left right level level example given binary tree null null return level order traversal
a city skyline outer contour silhouette formed buildings city viewed distance now suppose given locations height buildings shown cityscape photo figure write program output skyline formed buildings collectively figure geometric information building represented triplet integers li ri hi li ri coordinates left right edge ith building respectively hi height guaranteed ≤ li ri ≤ int max hi ≤ int max ri li may assume buildings perfect rectangles grounded absolutely flat surface height instance dimensions buildings figure recorded  output list key points red dots figure format uniquely defines skyline key point left endpoint horizontal line segment note last key point rightmost building ends merely used mark termination skyline always zero height also ground two adjacent buildings considered part skyline contour instance skyline figure represented  notes number buildings input list guaranteed range input list already sorted ascending order left position li output list must sorted position must consecutive horizontal lines equal height output skyline instance  acceptable three lines height merged one final output credits special thanks stellari adding problem creating two awesome images test cases
say array ith element price given stock day design algorithm find maximum profit may complete many transactions like ie buy one sell one share stock multiple times however may engage multiple transactions time ie must sell stock buy
write function check whether input string valid ipv address ipv address neither ipv addresses canonically represented dot decimal notation consists four decimal numbers ranging separated dots besides leading zeros ipv invalid example address invalid ipv addresses represented eight groups four hexadecimal digits group representing bits groups separated colons example address db valid one also omit leading zeros among four hexadecimal digits low case characters address upper case ones db also valid ipv address omit leading zeros using upper cases however don replace consecutive group zero value single empty group using two consecutive colons pursue simplicity example db invalid ipv address besides extra leading zeros ipv also invalid example address db invalid note may assume extra space special characters input string example input output ipv explanation valid ipv address return ipv example input db output ipv explanation valid ipv address return ipv example input output neither explanation neither ipv address ipv address
you given matrix representing image rotate image degrees clockwise follow place
given circular array next element last element first element array print next greater number every element next greater number number first greater number traversing order next array means search circularly find next greater number doesn exist output number example input output explanation first next greater number number can find next greater number second next greater number needs search circularly also note length given array won exceed
determine sudoku valid according sudoku puzzles rules sudoku board partially filled empty cells filled character partially filled sudoku valid note valid sudoku board partially filled necessarily solvable filled cells need validated
given nested list integers represented string implement parser deserialize element either integer list whose elements may also integers lists note may assume string formed string non empty string contain white spaces string contains digits example given return nestedinteger object contains single integer example given return nestedinteger object containing nested list elements integer containing value nested list containing two elements integer containing value ii nested list one element integer containing value
given list hour clock time points hour minutes format find minimum minutes difference two time points list example input output note number time points given list least won exceed input time legal ranges
given sorted integer array without duplicates return summary ranges example given return credits special thanks jianchao li fighter adding problem creating test cases
given word need judge whether usage capitals right define usage capitals word right one following cases holds letters word capitals like usa letters word capitals like leetcode first letter word capital one letter like google otherwise define word doesn use capitals right way example input usa output true example input flag output false note input will non empty word consisting uppercase lowercase latin letters
given binary tree return bottom level order traversal nodes values ie left right level level leaf root example given binary tree null null return bottom level order traversal
write function find longest common prefix string amongst array strings
given non empty string check can constructed taking substring appending multiple copies substring together may assume given string consists lowercase english letters length will exceed example input abab output true explanation substring ab twice example input aba output false example input abcabcabcabc output true explanation substring abc four times substring abcabc twice
reverse singly linked list click show hints hint linked list can reversed either iteratively recursively implement
the string paypalishiring written zigzag pattern given number rows like may want display pattern fixed font better legibility read line line pahnaplsiigyir write code will take string make conversion given number rows string convert string text int nrows convert paypalishiring return pahnaplsiigyir
given non negative integers representing histogram bar height width bar find area largest rectangle histogram histogram width bar given height largest rectangle shown shaded area area unit example given heights return
given array integers find three integers sum closest given number target return sum three integers may assume input exactly one solution example given array target sum closest target
given two binary trees write function check equal two binary trees considered equal structurally identical nodes value
serialization process converting data structure object sequence bits can stored file memory buffer transmitted across network connection link reconstructed later another computer environment design algorithm serialize deserialize binary tree restriction serialization deserialization algorithm work just need ensure binary tree can serialized string string can deserialized original tree structure example may serialize following tree  null null just leetcode oj serializes binary tree necessarily need follow format please creative come different approaches note use class member global static variables store states serialize deserialize algorithms stateless credits special thanks louis adding problem creating test cases
write program find node intersection two singly linked lists begins example following two linked lists → ↘ → → ↗ → → begin intersect node notes two linked lists intersection return null linked lists must retain original structure function returns may assume cycles anywhere entire linked structure code preferably run time use memory credits special thanks stellari adding problem creating test cases
write function takes string input reverse vowels string example given hello return holle example given leetcode return leotcede note vowels include letter
given binary array find maximum number consecutive array example input output explanation first two digits last three digits consecutive maximum number consecutive note input array will contain length input array positive integer will exceed
equations given format variables represented strings real number floating point number given queries return answers answer exist return example given queries  return input vector lt pair lt string string gt gt equations vector lt double gt amp values vector lt pair lt string string gt gt queries equations size values size values positive represents equations return vector lt double gt according example equations values queries input always valid may assume evaluating queries will result division zero contradiction
one way serialize binary tree use pre order traversal encounter non null node record node value null node record using sentinel value example binary tree can serialized string represents null node given string comma separated values verify whether correct preorder traversal serialization binary tree find algorithm without reconstructing tree comma separated value string must either integer character representing null pointer may assume input format always valid example never contain two consecutive commas example return true example return false example return false credits special thanks dietpepsi adding problem creating test cases
you given two non empty linked lists representing two non negative integers significant digit comes first nodes contain single digit add two numbers return linked list may assume two numbers contain leading zero except number follow modify input lists words reversing lists allowed example input output
write algorithm determine number happy happy number number defined following process starting positive integer replace number sum squares digits repeat process number equals will stay loops endlessly cycle include numbers process ends happy numbers example nbsp happy number credits special thanks mithmatt ts adding problem creating test cases
given string find length longest substring without repeating characters examples given abcabcbb answer abc length given bbbbb answer length given pwwkew answer wke length note answer must substring pwke subsequence substring
given array integers elements target find unique quadruplets array gives sum target note solution set must contain duplicate quadruplets example given array target solution set
given sorted array target value return index target found return index inserted order may assume duplicates array examples
given sequence integers pattern subsequence ai aj ak ai ak aj design algorithm takes list numbers input checks whether pattern list note will less example input output false explanation pattern sequence example input output true explanation pattern sequence example input output true explanation three patterns sequence
